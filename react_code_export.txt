// File: frontend/src\App.js
import { BrowserRouter, Route, Routes } from 'react-router-dom';
import Dashboard from './pages/dashboard';
import Events from './pages/events';
import Tasks from './pages/tasks';
import Profile from './pages/profile';
import Home from './home';
import Login from './authentication/login';
import Signup from './authentication/signup';
import EditEvent from './events/editevent';
import CreateEvent from './events/createevent';
import EditTask from './tasks/edittask'; // Ensure this component exists
import CreateTask from './tasks/createtask'; // Ensure this component exists

function App() {
  return (
    <div>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/events" element={<Events />} />
          <Route path="/tasks" element={<Tasks />} />
          <Route path="/createtask" element={<CreateTask />} />
          <Route path="/createevent" element={<CreateEvent />} />
          <Route path="/profile" element={<Profile />} />
          <Route path="/editevent/:eventid" element={<EditEvent />} />
          <Route path="/edittask/:taskid" element={<EditTask />} />
          <Route path="/login" element={<Login />} />
          <Route path="/signup" element={<Signup />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;


// File: frontend/src\home.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
  return (
    <div className="bg-gray-50 min-h-screen flex items-center justify-center">
      <div className="container mx-auto p-6 max-w-md bg-white rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold mb-8 text-center text-blue-700">Welcome to Eventure</h1>
        <p className="text-center text-gray-600 mb-8">
          Your one-stop solution for managing and organizing events effortlessly. 
          Sign up or log in to get started!
        </p>
        <div className="space-y-4">
          <div className="bg-blue-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-blue-600 mb-2">Signup</h2>
            <p className="text-gray-700 mb-4">Create an account to start managing your events. It's quick and easy!</p>
            <Link to="/signup">
              <button className="w-full py-2 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200">
                Signup
              </button>
            </Link>
          </div>
          <div className="bg-green-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-600 mb-2">Login</h2>
            <p className="text-gray-700 mb-4">Already have an account? Log in to access your events and more.</p>
            <Link to="/login">
              <button className="w-full py-2 px-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-200">
                Login
              </button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;


// File: frontend/src\index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


// File: frontend/src\authentication\login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  async function handleLogin(e) {
    e.preventDefault();

    try {
      const response = await axios.post('http://localhost:5000/login', { username, password });
      if (response.data.success) {
        localStorage.setItem('username', response.data.username);
        localStorage.setItem('userId', response.data.userId);  // Save userId
        navigate('/dashboard');
      } else {
        setError(response.data.message || 'Invalid username or password');
      }
    } catch (error) {
      setError('An error occurred. Please try again.');
    }
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-sm bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 text-center">Login to Eventure</h1>
        <form onSubmit={handleLogin}>
          <div className="mb-6">
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-2">Username</label>
            <input
              type="text"
              id="username"
              name="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <div className="mb-6">
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <button
            type="submit"
            className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Login
          </button>
          {error && <div className="text-red-600 text-center mt-4">{error}</div>}
        </form>
      </div>
    </div>
  );
}

export default Login;


// File: frontend/src\authentication\signup.jsx
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Signup() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (password !== confirmPassword) {
      setError('Passwords do not match.');
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/signup', { username, password });
      if (response.data.message === "User created successfully") {
        navigate('/login');
      } else {
        setError(response.data.message || 'Signup failed.');
      }
    } catch (error) {
      setError('An error occurred. Please try again.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold text-gray-800 mb-8 text-center">Sign Up</h1>
        <form onSubmit={handleSubmit}>
          <div className="mb-6">
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-2">Username</label>
            <input
              type="text"
              id="username"
              name="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <div className="mb-6">
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <div className="mb-6">
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">Confirm Password</label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <button
            type="submit"
            className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Sign Up
          </button>
          {error && <div className="text-red-600 text-center mt-4">{error}</div>}
        </form>
      </div>
    </div>
  );
}

export default Signup;


// File: frontend/src\components\header.jsx
import { Link } from 'react-router-dom';

function Header() {
  const handleLogout = () => {
    localStorage.clear(); // Clear all local storage data
    window.location.href = '/login'; // Redirect to login page
  };

  return (
    <header className="bg-gray-900 text-white shadow-md">
      <nav className="container mx-auto flex justify-between items-center p-4">
        <div className="flex space-x-4">
          <Link to="/dashboard" className="hover:bg-gray-700 px-3 py-2 rounded transition">Home</Link>
          <Link to="/events" className="hover:bg-gray-700 px-3 py-2 rounded transition">Events</Link>
          <Link to="/tasks" className="hover:bg-gray-700 px-3 py-2 rounded transition">Tasks</Link>
          <Link to="/profile" className="hover:bg-gray-700 px-3 py-2 rounded transition">Profile</Link>
        </div>
        <button
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg transition"
        >
          Logout
        </button>
      </nav>
    </header>
  );
}

export default Header;


// File: frontend/src\events\createevent.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function CreateEvent() {
  const [event, setEvent] = useState({
    title: '',
    description: '',
    date: '',
    location: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEvent((prevEvent) => ({ ...prevEvent, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    if (!event.title || !event.description || !event.date || !event.location) {
      setError('All fields are required.');
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/events', event);
      if (response.data.success) {
        setSuccess('Event created successfully!');
        setTimeout(() => navigate('/events'), 1500);
      } else {
        setError(response.data.message || 'Failed to create event.');
      }
    } catch (error) {
      console.error('Error creating event:', error);
      setError('An error occurred. Please try again.');
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen flex items-center justify-center">
      <div className="w-full max-w-lg bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-3xl font-semibold text-gray-800 mb-6">Create New Event</h1>
        {error && <div className="text-red-600 mb-4">{error}</div>}
        {success && <div className="text-green-600 mb-4">{success}</div>}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">Event Name</label>
            <input
              type="text"
              id="title"
              name="title"
              value={event.title}
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              id="description"
              name="description"
              value={event.description}
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              rows="4"
              required
            />
          </div>
          <div>
            <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-2">Date</label>
            <input
              type="date"
              id="date"
              name="date"
              value={event.date}
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <div>
            <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-2">Location</label>
            <input
              type="text"
              id="location"
              name="location"
              value={event.location}
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <div>
            <button
              type="submit"
              className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Create Event
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default CreateEvent;


// File: frontend/src\events\editevent.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

function EditEvent() {
  const { eventid } = useParams();
  const [event, setEvent] = useState({
    title: '',
    description: '',
    date: '',
    location: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/events/${eventid}`);
        setEvent(response.data);
      } catch (error) {
        setError('Error fetching event details.');
      }
    };

    fetchEvent();
  }, [eventid]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEvent((prevEvent) => ({ ...prevEvent, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      const response = await axios.put(`http://localhost:5000/events/${eventid}`, event);
      if (response.data.success) {
        setSuccess('Event updated successfully!');
        setTimeout(() => navigate('/events'), 1500);
      } else {
        setError(response.data.message || 'Failed to update event.');
      }
    } catch (error) {
      console.error('Error updating event:', error);
      setError('An error occurred. Please try again.');
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen flex items-center justify-center">
      <div className="w-full max-w-lg bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-3xl font-semibold text-gray-800 mb-6">Edit Event</h1>
        {error && <div className="text-red-600 mb-4">{error}</div>}
        {success && <div className="text-green-600 mb-4">{success}</div>}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">Event Name</label>
            <input
              type="text"
              id="title"
              name="title"
              value={event.title || ''} // Ensure value is always defined
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              id="description"
              name="description"
              value={event.description || ''} // Ensure value is always defined
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              rows="4"
              required
            />
          </div>
          <div>
            <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-2">Date</label>
            <input
              type="date"
              id="date"
              name="date"
              value={event.date || ''} // Ensure value is always defined
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <div>
            <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-2">Location</label>
            <input
              type="text"
              id="location"
              name="location"
              value={event.location || ''} // Ensure value is always defined
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <div>
            <button
              type="submit"
              className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Update Event
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default EditEvent;


// File: frontend/src\pages\dashboard.jsx
import React, { useEffect, useState } from 'react';
import Header from '../components/header';
import { Link } from 'react-router-dom';
import axios from 'axios';

function Dashboard() {
  const [events, setEvents] = useState([]);
  const [username, setUsername] = useState('');
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await axios.get('http://localhost:5000/events');
        if (response.data.success) {
          const now = new Date();
          const upcomingEvents = response.data.events.filter(event => new Date(event.date) >= now);
          setEvents(upcomingEvents);
        } else {
          console.error('Failed to fetch events');
        }
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    const fetchTasks = async () => {
      try {
        const response = await axios.get('http://localhost:5000/tasks');
        if (response.data.success) {
          setTasks(response.data.tasks);
        } else {
          console.error('Failed to fetch tasks');
        }
      } catch (error) {
        console.error('Error fetching tasks:', error);
      }
    };

    const storedUsername = localStorage.getItem('username');
    setUsername(storedUsername || 'Guest');

    fetchEvents();
    fetchTasks();
  }, []);

  return (
    <div>
      <Header />
      <main className="container mx-auto p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-semibold">Welcome, {username}</h1>
          <div className="flex space-x-4">
            <Link to="/createevent">
              <button className="px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 transition">
                Create New Event
              </button>
            </Link>
            <Link to="/createtask">
              <button className="px-4 py-2 bg-green-600 text-white rounded-lg shadow-md hover:bg-green-700 transition">
                Create Task
              </button>
            </Link>
          </div>
        </div>
        <section className="bg-white p-6 mb-6 shadow-lg rounded-lg">
          <h2 className="text-2xl font-semibold mb-4">Upcoming Events</h2>
          {events.length > 0 ? (
            events.map((event, index) => (
              <div key={event.eventid} className="border-b border-gray-300 py-2 last:border-b-0">
                <p className="text-lg font-medium">
                  Event {index + 1}: <span className="text-gray-500">{event.title}</span> - Date: <span className="text-gray-500">{new Date(event.date).toISOString().split('T')[0]}</span>
                </p>
              </div>
            ))
          ) : (
            <p className="text-gray-500">No upcoming events available</p>
          )}
        </section>
        <section className="bg-white p-6 shadow-lg rounded-lg">
          <h2 className="text-2xl font-semibold mb-4">Your Tasks</h2>
          {tasks.length > 0 ? (
            tasks.map((task, index) => (
              <div key={task.taskid} className="bg-gray-100 p-4 mb-4 rounded-lg shadow-sm border border-gray-200">
                <p className="text-lg font-medium">
                  Task {index + 1}: <span className="text-gray-700">{task.title}</span>
                </p>
              </div>
            ))
          ) : (
            <p className="text-gray-500">No tasks available</p>
          )}
        </section>
      </main>
    </div>
  );
}

export default Dashboard;


// File: frontend/src\pages\events.jsx
import React, { useEffect, useState } from 'react';
import Header from '../components/header';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function Events() {
  const [events, setEvents] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await axios.get('http://localhost:5000/events');
        if (response.data.success) {
          setEvents(response.data.events);
        } else {
          console.error('Failed to fetch events');
        }
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []);

  const handleEdit = (eventid) => {
    navigate(`/editevent/${eventid}`);
  };

  const handleDelete = async (eventid) => {
    try {
      const response = await axios.delete(`http://localhost:5000/events/${eventid}`);
      if (response.data.success) {
        setEvents(events.filter(event => event.eventid !== eventid));
      } else {
        console.error('Failed to delete event');
      }
    } catch (error) {
      console.error('Error deleting event:', error);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString(); // Get the date in a readable format
  };

  return (
    <div className="bg-gray-100 min-h-screen">
      <Header />
      <main className="container mx-auto p-6">
        <div className="text-center py-6">
          <h1 className="text-3xl font-semibold text-gray-800">Event Details</h1>
        </div>
        {events.map(event => (
          <section key={event.eventid} className="bg-white p-6 mb-6 rounded-lg shadow-lg">
            <div className="mb-4">
              <h2 className="text-xl font-bold text-gray-700 mb-1">Event Name</h2>
              <p className="text-gray-900">{event.title}</p>
            </div>
            <div className="mb-4">
              <h2 className="text-xl font-bold text-gray-700 mb-1">Event Date</h2>
              <p className="text-gray-900">{formatDate(event.date)}</p>
            </div>
            <div className="mb-4">
              <h2 className="text-xl font-bold text-gray-700 mb-1">Location</h2>
              <p className="text-gray-900">{event.location}</p>
            </div>
            <div className="mb-4">
              <h2 className="text-xl font-bold text-gray-700 mb-1">Description</h2>
              <p className="text-gray-900">{event.description}</p>
            </div>
            <div className="flex space-x-4">
              <button 
                onClick={() => handleEdit(event.eventid)}
                className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition"
              >
                Edit Event
              </button>
              <button 
                onClick={() => handleDelete(event.eventid)}
                className="px-4 py-2 bg-red-600 text-white font-semibold rounded-lg shadow-md hover:bg-red-700 transition"
              >
                Delete Event
              </button>
            </div>
          </section>
        ))}
      </main>
    </div>
  );
}

export default Events;


// File: frontend/src\pages\profile.jsx
import React, { useEffect, useState } from 'react';
import Header from '../components/header';
import axios from 'axios';

function Profile() {
  const [pastEvents, setPastEvents] = useState([]);
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [userId, setUserId] = useState(null);

  useEffect(() => {
    const storedUserId = localStorage.getItem('userId');
    if (storedUserId) {
      setUserId(storedUserId);
    } else {
      setMessage('User ID not found. Please log in again.');
    }
  }, []);

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    if (newPassword !== confirmPassword) {
      setMessage('New passwords do not match');
      return;
    }

    if (!userId) {
      setMessage('User ID is not available');
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/changepassword', {
        userId,
        currentPassword,
        newPassword,
      });
      setMessage(response.data.message);
    } catch (error) {
      console.error('Error changing password:', error);
      setMessage('Error changing password');
    }
  };

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await axios.get('http://localhost:5000/events');
        if (response.data.success) {
          const now = new Date();
          const pastEventsList = response.data.events.filter(event => new Date(event.date) < now);
          setPastEvents(pastEventsList);
        } else {
          console.error('Failed to fetch events:', response.data.message);
        }
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString(); // Improved date formatting
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      <Header />
      <main className="p-6 lg:p-8">
        <h1 className="text-4xl font-extrabold text-gray-800 mb-10">Profile Management</h1>

        <section className="bg-white p-6 rounded-lg shadow-lg mb-10 max-w-3xl">
          <h2 className="text-2xl font-semibold text-gray-700 mb-6">Change Password</h2>
          <form onSubmit={handlePasswordChange} className="space-y-4">
            <div>
              <label htmlFor="currentPassword" className="block text-sm font-medium text-gray-600 mb-2">Current Password</label>
              <input
                type="password"
                id="currentPassword"
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                required
              />
            </div>
            <div>
              <label htmlFor="newPassword" className="block text-sm font-medium text-gray-600 mb-2">New Password</label>
              <input
                type="password"
                id="newPassword"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                required
              />
            </div>
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-600 mb-2">Confirm New Password</label>
              <input
                type="password"
                id="confirmPassword"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full py-2 px-4 bg-blue-500 text-white font-semibold rounded-md shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-4 focus:ring-blue-300 transition"
              disabled={!userId}
            >
              Change Password
            </button>
          </form>
          {message && <p className="text-red-500 mt-4 text-center">{message}</p>}
        </section>

        <section className="bg-white p-6 rounded-lg shadow-lg max-w-3xl">
          <h2 className="text-2xl font-semibold text-gray-700 mb-6">Past Events and Activities</h2>
          {pastEvents.length > 0 ? (
            <ul className="list-disc pl-5 space-y-2">
              {pastEvents.map((event) => (
                <li key={event.eventid} className="text-gray-800">
                  <span className="font-semibold">{event.title}</span> - Date: {formatDate(event.date)}
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-600">No past events available</p>
          )}
        </section>
      </main>
    </div>
  );
}

export default Profile;


// File: frontend/src\pages\tasks.jsx
import React, { useEffect, useState } from 'react';
import Header from '../components/header';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function Tasks() {
  const [tasks, setTasks] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const response = await axios.get('http://localhost:5000/tasks');
        if (response.data.success) {
          setTasks(response.data.tasks);
        } else {
          console.error('Failed to fetch tasks');
        }
      } catch (error) {
        console.error('Error fetching tasks:', error);
      }
    };

    fetchTasks();
  }, []);

  const handleEdit = (taskid) => {
    navigate(`/edittask/${taskid}`);
  };

  const handleDelete = async (taskid) => {
    try {
      const response = await axios.delete(`http://localhost:5000/tasks/${taskid}`);
      if (response.data.success) {
        setTasks(tasks.filter(task => task.taskid !== taskid));
      } else {
        console.error('Failed to delete task');
      }
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  return (
    <div>
      <Header />
      <div className="container mx-auto p-6">
        <div className="text-center py-4">
          <h1 className="text-3xl font-semibold">Task Details</h1>
        </div>
        {tasks.length > 0 ? (
          tasks.map(task => (
            <div key={task.taskid} className="bg-white p-6 mt-4 rounded-lg shadow-lg">
              <div className="mb-4">
                <label className="font-semibold text-gray-700">Task Title:</label>
                <div className="text-gray-900">{task.title}</div>
              </div>
              <div className="mb-4">
                <label className="font-semibold text-gray-700">Description:</label>
                <div className="text-gray-900">{task.description}</div>
              </div>
              <div className="mb-4">
                <label className="font-semibold text-gray-700">Status:</label>
                <div className="text-gray-900">{task.status}</div>
              </div>
              <div className="flex space-x-4">
                <button
                  onClick={() => handleEdit(task.taskid)}
                  className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Edit Task
                </button>
                <button
                  onClick={() => handleDelete(task.taskid)}
                  className="px-4 py-2 bg-red-600 text-white font-semibold rounded-md shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
                >
                  Delete Task
                </button>
              </div>
            </div>
          ))
        ) : (
          <div className="bg-white p-6 mt-4 rounded-lg shadow-lg">
            <p>No tasks available</p>
          </div>
        )}
      </div>
    </div>
  );
}

export default Tasks;


// File: frontend/src\tasks\createtask.jsx
import React, { useState, useEffect } from 'react';
import Header from '../components/header';
import axios from 'axios';

const Createtask = () => {
  const [taskTitle, setTaskTitle] = useState('');
  const [taskDescription, setTaskDescription] = useState('');
  const [taskDeadline, setTaskDeadline] = useState('');
  const [selectedEvent, setSelectedEvent] = useState('');
  const [selectedAssignee, setSelectedAssignee] = useState('');
  const [events, setEvents] = useState([]);
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await axios.get('http://localhost:5000/events');
        setEvents(response.data.events);
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    const fetchUsers = async () => {
      try {
        const response = await axios.get('http://localhost:5000/users');
        setUsers(response.data.users);
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };

    fetchEvents();
    fetchUsers();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:5000/tasks', {
        title: taskTitle,
        description: taskDescription,
        deadline: taskDeadline,
        eventid: selectedEvent,
        assigneeid: selectedAssignee,
      });
      alert('Task created successfully');
      // Clear form fields
      setTaskTitle('');
      setTaskDescription('');
      setTaskDeadline('');
      setSelectedEvent('');
      setSelectedAssignee('');
    } catch (error) {
      console.error('Error creating task:', error);
      alert('Error creating task');
    }
  };

  return (
    <div>
      <Header />
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-semibold text-gray-800 mb-6">Create New Task</h1>
        <div className="bg-white p-6 rounded-lg shadow-lg">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="event" className="block text-sm font-medium text-gray-700">Related Event</label>
              <select
                id="event"
                value={selectedEvent}
                onChange={(e) => setSelectedEvent(e.target.value)}
                className="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
              >
                <option value="">Select an Event</option>
                {events.map((event) => (
                  <option key={event.eventid} value={event.eventid}>
                    {event.title}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
              <input
                id="title"
                type="text"
                value={taskTitle}
                onChange={(e) => setTaskTitle(e.target.value)}
                className="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
              <input
                id="description"
                type="text"
                value={taskDescription}
                onChange={(e) => setTaskDescription(e.target.value)}
                className="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
            <div>
              <label htmlFor="deadline" className="block text-sm font-medium text-gray-700">Deadline</label>
              <input
                id="deadline"
                type="date"
                value={taskDeadline}
                onChange={(e) => setTaskDeadline(e.target.value)}
                className="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
            <div>
              <label htmlFor="assignee" className="block text-sm font-medium text-gray-700">Assignee</label>
              <select
                id="assignee"
                value={selectedAssignee}
                onChange={(e) => setSelectedAssignee(e.target.value)}
                className="mt-1 block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
              >
                <option value="">Select an Assignee</option>
                {users.map((user) => (
                  <option key={user.userid} value={user.userid}>
                    {user.username}
                  </option>
                ))}
              </select>
            </div>
            <button
              type="submit"
              className="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Create Task
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Createtask;


// File: frontend/src\tasks\edittask.jsx
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

function EditTask() {
  const { taskid } = useParams();
  const [task, setTask] = useState(null);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchTask = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/tasks/${taskid}`);
        if (response.data.success) {
          setTask(response.data.task);
          setTitle(response.data.task.title);
          setDescription(response.data.task.description);
        } else {
          console.error('Failed to fetch task');
        }
      } catch (error) {
        console.error('Error fetching task:', error);
      }
    };

    if (taskid) {
      fetchTask();
    }
  }, [taskid]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.put(`http://localhost:5000/tasks/${taskid}`, {
        title,
        description,
      });
      if (response.data.success) {
        navigate('/tasks');
      } else {
        console.error('Failed to update task');
      }
    } catch (error) {
      console.error('Error updating task:', error);
    }
  };

  if (!task) return <p>Loading...</p>;

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-semibold mb-4">Edit Task</h1>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-lg">
        <div className="mb-4">
          <label className="font-semibold text-gray-700">Title:</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="ml-1 p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            required
          />
        </div>
        <div className="mb-4">
          <label className="font-semibold text-gray-700">Description:</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="ml-1 p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            required
          />
        </div>
        <button type="submit" className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
          Update Task
        </button>
      </form>
    </div>
  );
}

export default EditTask;


// File: backend\index.js
const express = require("express");
const cors = require("cors");
const connectDB = require("./config/db");
const User = require("./models/user");
const Task = require("./models/task");
const { getNextUserId, getNextTaskId } = require('./utils/idUtils');

const app = express();
app.use(cors());
app.use(express.json());

// Connect to MongoDB
connectDB();



// Signup Route
app.post("/signup", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate that both fields are provided
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }

    // Check if the user already exists
    const existingUser = await User.findOne({ username });

    if (existingUser) {
      return res.status(400).json({ message: "Username already exists" });
    }

    // Get the next user ID
    const nextUserId = await getNextUserId();

    // Create a new user
    const newUser = new User({ userid: nextUserId, username, password });
    await newUser.save();

    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error('Error during signup:', error);
    res.status(500).json({ message: "Error creating user", error });
  }
});

app.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    const foundUser = await User.findOne({ username });

    if (foundUser) {
      if (foundUser.password === password) {
        res.json({
          success: true,
          username: foundUser.username,
          userId: foundUser._id,  // Include userId in the response
        });
      } else {
        res.json({ success: false, message: "Incorrect password" });
      }
    } else {
      res.json({ success: false, message: "User not found" });
    }
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ message: "Error checking user", error });
  }
});

app.post('/changepassword', async (req, res) => {
  const { userId, currentPassword, newPassword } = req.body; // Retrieve userId from request body

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    if (currentPassword !== user.password) {
      return res.status(400).json({ message: 'Current password is incorrect' });
    }

    user.password = newPassword;
    await user.save();

    res.json({ message: 'Password changed successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

const eventRoutes = require("./routes/eventRoutes");
app.use("/events", eventRoutes);

const userRoutes = require('./routes/userRoutes');
app.use('/users', userRoutes);

const taskRoutes = require('./routes/taskRoutes');
app.use('/tasks', taskRoutes);

// Task Routes
app.post("/tasks", async (req, res) => {
  try {
    const { title, description, status } = req.body;

    if (!title || !description || !status) {
      return res.status(400).json({ success: false, message: 'All required fields must be filled' });
    }

    const taskid = await getNextTaskId();
    const newTask = new Task({ taskid, title, description, status });
    await newTask.save();
    res.status(201).json({ success: true, message: 'Task created successfully' });
  } catch (error) {
    console.error('Error creating task:', error);
    res.status(500).json({ success: false, message: 'Error creating task', error });
  }
});

app.get("/tasks", async (req, res) => {
  try {
    const tasks = await Task.find();
    res.json({ success: true, tasks });
  } catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({ success: false, message: 'Error fetching tasks', error });
  }
});

app.get("/tasks/:id", async (req, res) => {
  try {
    const task = await Task.findOne({ taskid: req.params.id });
    if (task) {
      res.json({ success: true, task });
    } else {
      res.status(404).json({ success: false, message: "Task not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error fetching task", error });
  }
});

app.put("/tasks/:id", async (req, res) => {
  try {
    const { title, description, status } = req.body;
    const updatedTask = await Task.findOneAndUpdate(
      { taskid: req.params.id },
      { title, description, status },
      { new: true }
    );
    if (updatedTask) {
      res.json({ success: true, message: "Task updated successfully", task: updatedTask });
    } else {
      res.status(404).json({ success: false, message: "Task not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error updating task", error });
  }
});

app.delete("/tasks/:id", async (req, res) => {
  try {
    const deletedTask = await Task.findOneAndDelete({ taskid: req.params.id });
    if (deletedTask) {
      res.json({ success: true, message: "Task deleted successfully" });
    } else {
      res.status(404).json({ success: false, message: "Task not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error deleting task", error });
  }
});


const PORT = 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


// File: backend\config\db.js
const mongoose = require("mongoose");

const connectDB = async () => {
    try {
        await mongoose.connect("mongodb://127.0.0.1:27017/eventuretwo");
        console.log("DB connection successful");
    } catch (error) {
        console.error("DB connection failed", error);
    }
};

module.exports = connectDB;


// File: backend\controllers\eventController.js
const Event = require("../models/event");
const { getNextEventId } = require("../utils/idUtils");


const createEvent = async (req, res) => {
  try {
    const { title, description, date, location } = req.body;

    if (!title || !description || !date || !location) {
      return res.status(400).json({ success: false, message: 'All required fields must be filled' });
    }

    const eventid = await getNextEventId();
    const newEvent = new Event({ eventid, title, description, date, location });
    await newEvent.save();
    res.status(201).json({ success: true, message: 'Event created successfully' });
  } catch (error) {
    console.error('Error creating event:', error);
    res.status(500).json({ success: false, message: 'Error creating event', error });
  }
};

const getAllEvents = async (req, res) => {
  try {
    const events = await Event.find();
    res.json({ success: true, events });
  } catch (error) {
    res.status(500).json({ message: "Error fetching events", error });
  }
};

const getSingleEvent = async (req, res) => {
  try {
    const event = await Event.findOne({ eventid: req.params.id });
    if (event) {
      res.json({ success: true, event });
    } else {
      res.status(404).json({ success: false, message: "Event not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error fetching event", error });
  }
};

const updateEvent = async (req, res) => {
  try {
    const { title, description, date, location } = req.body;
    const updatedEvent = await Event.findOneAndUpdate(
      { eventid: req.params.id },
      { title, description, date, location },
      { new: true }
    );
    if (updatedEvent) {
      res.json({ success: true, message: "Event updated successfully", event: updatedEvent });
    } else {
      res.status(404).json({ success: false, message: "Event not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error updating event", error });
  }
};

const deleteEvent = async (req, res) => {
  try {
    const deletedEvent = await Event.findOneAndDelete({ eventid: req.params.id });
    if (deletedEvent) {
      res.json({ success: true, message: "Event deleted successfully" });
    } else {
      res.status(404).json({ success: false, message: "Event not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error deleting event", error });
  }
};

module.exports = { createEvent, getAllEvents, getSingleEvent, updateEvent, deleteEvent };


// File: backend\controllers\taskController.js
const Task = require('../models/task');
const User = require('../models/user');
const { getNextTaskId } = require('../utils/idUtils');

const createTask = async (req, res) => {
  try {
    const { title, description, deadline, eventid, assigneeid } = req.body;

    if (!title || !description || !deadline || !eventid || !assigneeid) {
      return res.status(400).json({ success: false, message: 'All fields are required' });
    }

    // Get the next task ID
    const taskid = await getNextTaskId();
    const newTask = new Task({ taskid, title, description, deadline, eventid, assigneeid });
    await newTask.save();

    // Update the user with the new task ID
    await User.findOneAndUpdate(
      { userid: assigneeid },
      { $push: { task_ids: taskid } }
    );

    res.status(201).json({ success: true, message: 'Task created successfully', task: newTask });
  } catch (error) {
    console.error('Error creating task:', error);
    res.status(500).json({ success: false, message: 'Error creating task', error });
  }
};

const getTasksByUser = async (req, res) => {
  try {
    const userId = req.params.userid;
    const tasks = await Task.find({ assigneeid: userId });
    res.json({ success: true, tasks });
  } catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({ message: 'Error fetching tasks', error });
  }
};

module.exports = { createTask, getTasksByUser };


// File: backend\controllers\userController.js
const User = require('../models/user');

const getAllUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.json({ success: true, users });
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ message: 'Error fetching users', error });
  }
};

module.exports = { getAllUsers };


// File: backend\models\event.js
const mongoose = require('mongoose');

const eventSchema = new mongoose.Schema({
  eventid: { type: Number, required: true, unique: true },
  title: { type: String, required: true },
  description: { type: String, required: true },
  date: { type: Date, required: true },
  location: { type: String, required: true }
  // userid: { type: Number, ref: 'User', required: true },  // Reference to User collection
  // task_ids: [{ type: Number, ref: 'Task' }],  // Array of task IDs
  // participant_ids: [{ type: Number, ref: 'Participant' }]  // Array of participant IDs
});

const Event = mongoose.model('Event', eventSchema);

module.exports = Event;


// File: backend\models\participant.js
const mongoose = require('mongoose');

const participantSchema = new mongoose.Schema({
  participantid: { type: Number, required: true, unique: true },
  userid: { type: Number, ref: 'User', required: true },  // Reference to User collection
  eventid: { type: Number, ref: 'Event', required: true },  // Reference to Event collection
  role: { type: String, required: true }
});

const Participant = mongoose.model('Participant', participantSchema);

module.exports = Participant;


// File: backend\models\task.js
const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
  taskid: { type: Number, required: true, unique: true },
  title: { type: String, required: true },
  description: { type: String, required: true },
  deadline: { type: Date, required: true },
  eventid: { type: Number, ref: 'Event', required: true },
  assigneeid: { type: Number, ref: 'User', required: true }
});

const Task = mongoose.model('Task', taskSchema);

module.exports = Task;


// File: backend\models\user.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  userid: { type: Number, required: true, unique: true },
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  task_ids: [{ type: Number, ref: 'Task' }],  // Array of task IDs
  participating_event_ids: [{ type: Number, ref: 'Event' }]  // Array of event IDs
});

const User = mongoose.model('User', userSchema);

module.exports = User;

// File: backend\routes\eventRoutes.js
const express = require('express');
const { createEvent, getAllEvents, getSingleEvent, updateEvent, deleteEvent } = require('../controllers/eventController');

const router = express.Router();

router.post('/', createEvent);
router.get('/', getAllEvents);
router.get('/:id', getSingleEvent);
router.put('/:id', updateEvent);
router.delete('/:id', deleteEvent);

module.exports = router;


// File: backend\routes\taskRoutes.js
const express = require('express');
const router = express.Router();
const { createTask, getTasksByUser } = require('../controllers/taskController');

router.post('/', createTask);
router.get('/user/:userid', getTasksByUser);

module.exports = router;


// File: backend\routes\userRoutes.js
const express = require('express');
const { getAllUsers } = require('../controllers/userController');

const router = express.Router();

router.get('/', getAllUsers);

module.exports = router;


// File: backend\utils\idUtils.js
const mongoose = require('mongoose');
const Task = require('../models/task');
const Event = require('../models/event'); // Add this line
const User = require('../models/user'); // Import the User model

// Utility function to get the next task ID
const getNextTaskId = async () => {
  try {
    const lastTask = await Task.findOne().sort({ taskid: -1 });
    return lastTask ? lastTask.taskid + 1 : 1;
  } catch (error) {
    console.error('Error getting next task ID:', error);
    throw new Error('Could not get the next task ID');
  }
};

// Existing utility functions
const getNextEventId = async () => {
  const lastEvent = await Event.findOne().sort({ eventid: -1 });
  return lastEvent ? lastEvent.eventid + 1 : 1;
};

const getNextUserId = async () => {
  try {
    const lastUser = await User.findOne().sort({ userid: -1 });
    return lastUser ? lastUser.userid + 1 : 1;
  } catch (error) {
    console.error('Error getting next user ID:', error);
    throw new Error('Could not get the next user ID');
  }
};




module.exports = { getNextTaskId, getNextEventId, getNextUserId };


